// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/Fantom-foundation/go-lachesis/src/proxy (interfaces: Node,Consensus)

package main

import (
	hash "github.com/Fantom-foundation/go-lachesis/src/hash"
	inter "github.com/Fantom-foundation/go-lachesis/src/inter"
	gomock "github.com/golang/mock/gomock"
)

// Mock of Node interface
type MockNode struct {
	ctrl     *gomock.Controller
	recorder *_MockNodeRecorder
}

// Recorder for MockNode (not exported)
type _MockNodeRecorder struct {
	mock *MockNode
}

func NewMockNode(ctrl *gomock.Controller) *MockNode {
	mock := &MockNode{ctrl: ctrl}
	mock.recorder = &_MockNodeRecorder{mock}
	return mock
}

func (_m *MockNode) EXPECT() *_MockNodeRecorder {
	return _m.recorder
}

func (_m *MockNode) AddInternalTxn(_param0 inter.InternalTransaction) hash.Transaction {
	ret := _m.ctrl.Call(_m, "AddInternalTxn", _param0)
	ret0, _ := ret[0].(hash.Transaction)
	return ret0
}

func (_mr *_MockNodeRecorder) AddInternalTxn(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddInternalTxn", arg0)
}

func (_m *MockNode) GetID() hash.Peer {
	ret := _m.ctrl.Call(_m, "GetID")
	ret0, _ := ret[0].(hash.Peer)
	return ret0
}

func (_mr *_MockNodeRecorder) GetID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetID")
}

// Mock of Consensus interface
type MockConsensus struct {
	ctrl     *gomock.Controller
	recorder *_MockConsensusRecorder
}

// Recorder for MockConsensus (not exported)
type _MockConsensusRecorder struct {
	mock *MockConsensus
}

func NewMockConsensus(ctrl *gomock.Controller) *MockConsensus {
	mock := &MockConsensus{ctrl: ctrl}
	mock.recorder = &_MockConsensusRecorder{mock}
	return mock
}

func (_m *MockConsensus) EXPECT() *_MockConsensusRecorder {
	return _m.recorder
}

func (_m *MockConsensus) GetBalanceOf(_param0 hash.Peer) uint64 {
	ret := _m.ctrl.Call(_m, "GetBalanceOf", _param0)
	ret0, _ := ret[0].(uint64)
	return ret0
}

func (_mr *_MockConsensusRecorder) GetBalanceOf(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetBalanceOf", arg0)
}

func (_m *MockConsensus) GetTransaction(_param0 hash.Transaction) *inter.InternalTransaction {
	ret := _m.ctrl.Call(_m, "GetTransaction", _param0)
	ret0, _ := ret[0].(*inter.InternalTransaction)
	return ret0
}

func (_mr *_MockConsensusRecorder) GetTransaction(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTransaction", arg0)
}

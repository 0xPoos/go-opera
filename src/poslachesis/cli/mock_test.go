// Code generated by MockGen. DO NOT EDIT.
// Source: ../../proxy/wire/ctrl.pb.go

// Package main is a generated GoMock package.
package main

import (
	context "context"
	wire "github.com/Fantom-foundation/go-lachesis/src/proxy/wire"
	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockCtrlClient is a mock of CtrlClient interface
type MockCtrlClient struct {
	ctrl     *gomock.Controller
	recorder *MockCtrlClientMockRecorder
}

// MockCtrlClientMockRecorder is the mock recorder for MockCtrlClient
type MockCtrlClientMockRecorder struct {
	mock *MockCtrlClient
}

// NewMockCtrlClient creates a new mock instance
func NewMockCtrlClient(ctrl *gomock.Controller) *MockCtrlClient {
	mock := &MockCtrlClient{ctrl: ctrl}
	mock.recorder = &MockCtrlClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCtrlClient) EXPECT() *MockCtrlClientMockRecorder {
	return m.recorder
}

// ID mocks base method
func (m *MockCtrlClient) ID(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*wire.IDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ID", varargs...)
	ret0, _ := ret[0].(*wire.IDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ID indicates an expected call of ID
func (mr *MockCtrlClientMockRecorder) ID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockCtrlClient)(nil).ID), varargs...)
}

// Stake mocks base method
func (m *MockCtrlClient) Stake(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*wire.StakeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Stake", varargs...)
	ret0, _ := ret[0].(*wire.StakeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stake indicates an expected call of Stake
func (mr *MockCtrlClientMockRecorder) Stake(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stake", reflect.TypeOf((*MockCtrlClient)(nil).Stake), varargs...)
}

// InternalTxn mocks base method
func (m *MockCtrlClient) InternalTxn(ctx context.Context, in *wire.InternalTxnRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InternalTxn", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InternalTxn indicates an expected call of InternalTxn
func (mr *MockCtrlClientMockRecorder) InternalTxn(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InternalTxn", reflect.TypeOf((*MockCtrlClient)(nil).InternalTxn), varargs...)
}

// MockCtrlServer is a mock of CtrlServer interface
type MockCtrlServer struct {
	ctrl     *gomock.Controller
	recorder *MockCtrlServerMockRecorder
}

// MockCtrlServerMockRecorder is the mock recorder for MockCtrlServer
type MockCtrlServerMockRecorder struct {
	mock *MockCtrlServer
}

// NewMockCtrlServer creates a new mock instance
func NewMockCtrlServer(ctrl *gomock.Controller) *MockCtrlServer {
	mock := &MockCtrlServer{ctrl: ctrl}
	mock.recorder = &MockCtrlServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCtrlServer) EXPECT() *MockCtrlServerMockRecorder {
	return m.recorder
}

// ID mocks base method
func (m *MockCtrlServer) ID(arg0 context.Context, arg1 *empty.Empty) (*wire.IDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID", arg0, arg1)
	ret0, _ := ret[0].(*wire.IDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ID indicates an expected call of ID
func (mr *MockCtrlServerMockRecorder) ID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockCtrlServer)(nil).ID), arg0, arg1)
}

// Stake mocks base method
func (m *MockCtrlServer) Stake(arg0 context.Context, arg1 *empty.Empty) (*wire.StakeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stake", arg0, arg1)
	ret0, _ := ret[0].(*wire.StakeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stake indicates an expected call of Stake
func (mr *MockCtrlServerMockRecorder) Stake(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stake", reflect.TypeOf((*MockCtrlServer)(nil).Stake), arg0, arg1)
}

// InternalTxn mocks base method
func (m *MockCtrlServer) InternalTxn(arg0 context.Context, arg1 *wire.InternalTxnRequest) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InternalTxn", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InternalTxn indicates an expected call of InternalTxn
func (mr *MockCtrlServerMockRecorder) InternalTxn(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InternalTxn", reflect.TypeOf((*MockCtrlServer)(nil).InternalTxn), arg0, arg1)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ../../proxy/wire/grpc.pb.go

// Package main is a generated GoMock package.
package main

import (
	context "context"
	wire "github.com/Fantom-foundation/go-lachesis/src/proxy/wire"
	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockisToServer_Event is a mock of isToServer_Event interface
type MockisToServer_Event struct {
	ctrl     *gomock.Controller
	recorder *MockisToServer_EventMockRecorder
}

// MockisToServer_EventMockRecorder is the mock recorder for MockisToServer_Event
type MockisToServer_EventMockRecorder struct {
	mock *MockisToServer_Event
}

// NewMockisToServer_Event creates a new mock instance
func NewMockisToServer_Event(ctrl *gomock.Controller) *MockisToServer_Event {
	mock := &MockisToServer_Event{ctrl: ctrl}
	mock.recorder = &MockisToServer_EventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisToServer_Event) EXPECT() *MockisToServer_EventMockRecorder {
	return m.recorder
}

// isToServer_Event mocks base method
func (m *MockisToServer_Event) isToServer_Event() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isToServer_Event")
}

// isToServer_Event indicates an expected call of isToServer_Event
func (mr *MockisToServer_EventMockRecorder) isToServer_Event() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isToServer_Event", reflect.TypeOf((*MockisToServer_Event)(nil).isToServer_Event))
}

// MockisToServer_Answer_Payload is a mock of isToServer_Answer_Payload interface
type MockisToServer_Answer_Payload struct {
	ctrl     *gomock.Controller
	recorder *MockisToServer_Answer_PayloadMockRecorder
}

// MockisToServer_Answer_PayloadMockRecorder is the mock recorder for MockisToServer_Answer_Payload
type MockisToServer_Answer_PayloadMockRecorder struct {
	mock *MockisToServer_Answer_Payload
}

// NewMockisToServer_Answer_Payload creates a new mock instance
func NewMockisToServer_Answer_Payload(ctrl *gomock.Controller) *MockisToServer_Answer_Payload {
	mock := &MockisToServer_Answer_Payload{ctrl: ctrl}
	mock.recorder = &MockisToServer_Answer_PayloadMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisToServer_Answer_Payload) EXPECT() *MockisToServer_Answer_PayloadMockRecorder {
	return m.recorder
}

// isToServer_Answer_Payload mocks base method
func (m *MockisToServer_Answer_Payload) isToServer_Answer_Payload() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isToServer_Answer_Payload")
}

// isToServer_Answer_Payload indicates an expected call of isToServer_Answer_Payload
func (mr *MockisToServer_Answer_PayloadMockRecorder) isToServer_Answer_Payload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isToServer_Answer_Payload", reflect.TypeOf((*MockisToServer_Answer_Payload)(nil).isToServer_Answer_Payload))
}

// MockisToClient_Event is a mock of isToClient_Event interface
type MockisToClient_Event struct {
	ctrl     *gomock.Controller
	recorder *MockisToClient_EventMockRecorder
}

// MockisToClient_EventMockRecorder is the mock recorder for MockisToClient_Event
type MockisToClient_EventMockRecorder struct {
	mock *MockisToClient_Event
}

// NewMockisToClient_Event creates a new mock instance
func NewMockisToClient_Event(ctrl *gomock.Controller) *MockisToClient_Event {
	mock := &MockisToClient_Event{ctrl: ctrl}
	mock.recorder = &MockisToClient_EventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisToClient_Event) EXPECT() *MockisToClient_EventMockRecorder {
	return m.recorder
}

// isToClient_Event mocks base method
func (m *MockisToClient_Event) isToClient_Event() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isToClient_Event")
}

// isToClient_Event indicates an expected call of isToClient_Event
func (mr *MockisToClient_EventMockRecorder) isToClient_Event() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isToClient_Event", reflect.TypeOf((*MockisToClient_Event)(nil).isToClient_Event))
}

// MockManagementClient is a mock of ManagementClient interface
type MockManagementClient struct {
	ctrl     *gomock.Controller
	recorder *MockManagementClientMockRecorder
}

// MockManagementClientMockRecorder is the mock recorder for MockManagementClient
type MockManagementClientMockRecorder struct {
	mock *MockManagementClient
}

// NewMockManagementClient creates a new mock instance
func NewMockManagementClient(ctrl *gomock.Controller) *MockManagementClient {
	mock := &MockManagementClient{ctrl: ctrl}
	mock.recorder = &MockManagementClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockManagementClient) EXPECT() *MockManagementClientMockRecorder {
	return m.recorder
}

// ID mocks base method
func (m *MockManagementClient) ID(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*wire.IDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ID", varargs...)
	ret0, _ := ret[0].(*wire.IDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ID indicates an expected call of ID
func (mr *MockManagementClientMockRecorder) ID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockManagementClient)(nil).ID), varargs...)
}

// Stake mocks base method
func (m *MockManagementClient) Stake(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*wire.StakeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Stake", varargs...)
	ret0, _ := ret[0].(*wire.StakeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stake indicates an expected call of Stake
func (mr *MockManagementClientMockRecorder) Stake(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stake", reflect.TypeOf((*MockManagementClient)(nil).Stake), varargs...)
}

// InternalTxn mocks base method
func (m *MockManagementClient) InternalTxn(ctx context.Context, in *wire.InternalTxnRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InternalTxn", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InternalTxn indicates an expected call of InternalTxn
func (mr *MockManagementClientMockRecorder) InternalTxn(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InternalTxn", reflect.TypeOf((*MockManagementClient)(nil).InternalTxn), varargs...)
}

// MockManagementServer is a mock of ManagementServer interface
type MockManagementServer struct {
	ctrl     *gomock.Controller
	recorder *MockManagementServerMockRecorder
}

// MockManagementServerMockRecorder is the mock recorder for MockManagementServer
type MockManagementServerMockRecorder struct {
	mock *MockManagementServer
}

// NewMockManagementServer creates a new mock instance
func NewMockManagementServer(ctrl *gomock.Controller) *MockManagementServer {
	mock := &MockManagementServer{ctrl: ctrl}
	mock.recorder = &MockManagementServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockManagementServer) EXPECT() *MockManagementServerMockRecorder {
	return m.recorder
}

// ID mocks base method
func (m *MockManagementServer) ID(arg0 context.Context, arg1 *empty.Empty) (*wire.IDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID", arg0, arg1)
	ret0, _ := ret[0].(*wire.IDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ID indicates an expected call of ID
func (mr *MockManagementServerMockRecorder) ID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockManagementServer)(nil).ID), arg0, arg1)
}

// Stake mocks base method
func (m *MockManagementServer) Stake(arg0 context.Context, arg1 *empty.Empty) (*wire.StakeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stake", arg0, arg1)
	ret0, _ := ret[0].(*wire.StakeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stake indicates an expected call of Stake
func (mr *MockManagementServerMockRecorder) Stake(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stake", reflect.TypeOf((*MockManagementServer)(nil).Stake), arg0, arg1)
}

// InternalTxn mocks base method
func (m *MockManagementServer) InternalTxn(arg0 context.Context, arg1 *wire.InternalTxnRequest) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InternalTxn", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InternalTxn indicates an expected call of InternalTxn
func (mr *MockManagementServerMockRecorder) InternalTxn(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InternalTxn", reflect.TypeOf((*MockManagementServer)(nil).InternalTxn), arg0, arg1)
}

// MockLachesisNodeClient is a mock of LachesisNodeClient interface
type MockLachesisNodeClient struct {
	ctrl     *gomock.Controller
	recorder *MockLachesisNodeClientMockRecorder
}

// MockLachesisNodeClientMockRecorder is the mock recorder for MockLachesisNodeClient
type MockLachesisNodeClientMockRecorder struct {
	mock *MockLachesisNodeClient
}

// NewMockLachesisNodeClient creates a new mock instance
func NewMockLachesisNodeClient(ctrl *gomock.Controller) *MockLachesisNodeClient {
	mock := &MockLachesisNodeClient{ctrl: ctrl}
	mock.recorder = &MockLachesisNodeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLachesisNodeClient) EXPECT() *MockLachesisNodeClientMockRecorder {
	return m.recorder
}

// Connect mocks base method
func (m *MockLachesisNodeClient) Connect(ctx context.Context, opts ...grpc.CallOption) (wire.LachesisNode_ConnectClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Connect", varargs...)
	ret0, _ := ret[0].(wire.LachesisNode_ConnectClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect
func (mr *MockLachesisNodeClientMockRecorder) Connect(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockLachesisNodeClient)(nil).Connect), varargs...)
}

// MockLachesisNode_ConnectClient is a mock of LachesisNode_ConnectClient interface
type MockLachesisNode_ConnectClient struct {
	ctrl     *gomock.Controller
	recorder *MockLachesisNode_ConnectClientMockRecorder
}

// MockLachesisNode_ConnectClientMockRecorder is the mock recorder for MockLachesisNode_ConnectClient
type MockLachesisNode_ConnectClientMockRecorder struct {
	mock *MockLachesisNode_ConnectClient
}

// NewMockLachesisNode_ConnectClient creates a new mock instance
func NewMockLachesisNode_ConnectClient(ctrl *gomock.Controller) *MockLachesisNode_ConnectClient {
	mock := &MockLachesisNode_ConnectClient{ctrl: ctrl}
	mock.recorder = &MockLachesisNode_ConnectClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLachesisNode_ConnectClient) EXPECT() *MockLachesisNode_ConnectClientMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockLachesisNode_ConnectClient) Send(arg0 *wire.ToServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockLachesisNode_ConnectClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockLachesisNode_ConnectClient)(nil).Send), arg0)
}

// Recv mocks base method
func (m *MockLachesisNode_ConnectClient) Recv() (*wire.ToClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*wire.ToClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockLachesisNode_ConnectClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockLachesisNode_ConnectClient)(nil).Recv))
}

// Header mocks base method
func (m *MockLachesisNode_ConnectClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockLachesisNode_ConnectClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockLachesisNode_ConnectClient)(nil).Header))
}

// Trailer mocks base method
func (m *MockLachesisNode_ConnectClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockLachesisNode_ConnectClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockLachesisNode_ConnectClient)(nil).Trailer))
}

// CloseSend mocks base method
func (m *MockLachesisNode_ConnectClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockLachesisNode_ConnectClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockLachesisNode_ConnectClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockLachesisNode_ConnectClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockLachesisNode_ConnectClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockLachesisNode_ConnectClient)(nil).Context))
}

// SendMsg mocks base method
func (m_2 *MockLachesisNode_ConnectClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockLachesisNode_ConnectClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockLachesisNode_ConnectClient)(nil).SendMsg), m)
}

// RecvMsg mocks base method
func (m_2 *MockLachesisNode_ConnectClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockLachesisNode_ConnectClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockLachesisNode_ConnectClient)(nil).RecvMsg), m)
}

// MockLachesisNodeServer is a mock of LachesisNodeServer interface
type MockLachesisNodeServer struct {
	ctrl     *gomock.Controller
	recorder *MockLachesisNodeServerMockRecorder
}

// MockLachesisNodeServerMockRecorder is the mock recorder for MockLachesisNodeServer
type MockLachesisNodeServerMockRecorder struct {
	mock *MockLachesisNodeServer
}

// NewMockLachesisNodeServer creates a new mock instance
func NewMockLachesisNodeServer(ctrl *gomock.Controller) *MockLachesisNodeServer {
	mock := &MockLachesisNodeServer{ctrl: ctrl}
	mock.recorder = &MockLachesisNodeServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLachesisNodeServer) EXPECT() *MockLachesisNodeServerMockRecorder {
	return m.recorder
}

// Connect mocks base method
func (m *MockLachesisNodeServer) Connect(arg0 wire.LachesisNode_ConnectServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect
func (mr *MockLachesisNodeServerMockRecorder) Connect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockLachesisNodeServer)(nil).Connect), arg0)
}

// MockLachesisNode_ConnectServer is a mock of LachesisNode_ConnectServer interface
type MockLachesisNode_ConnectServer struct {
	ctrl     *gomock.Controller
	recorder *MockLachesisNode_ConnectServerMockRecorder
}

// MockLachesisNode_ConnectServerMockRecorder is the mock recorder for MockLachesisNode_ConnectServer
type MockLachesisNode_ConnectServerMockRecorder struct {
	mock *MockLachesisNode_ConnectServer
}

// NewMockLachesisNode_ConnectServer creates a new mock instance
func NewMockLachesisNode_ConnectServer(ctrl *gomock.Controller) *MockLachesisNode_ConnectServer {
	mock := &MockLachesisNode_ConnectServer{ctrl: ctrl}
	mock.recorder = &MockLachesisNode_ConnectServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLachesisNode_ConnectServer) EXPECT() *MockLachesisNode_ConnectServerMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockLachesisNode_ConnectServer) Send(arg0 *wire.ToClient) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockLachesisNode_ConnectServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockLachesisNode_ConnectServer)(nil).Send), arg0)
}

// Recv mocks base method
func (m *MockLachesisNode_ConnectServer) Recv() (*wire.ToServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*wire.ToServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockLachesisNode_ConnectServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockLachesisNode_ConnectServer)(nil).Recv))
}

// SetHeader mocks base method
func (m *MockLachesisNode_ConnectServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockLachesisNode_ConnectServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockLachesisNode_ConnectServer)(nil).SetHeader), arg0)
}

// SendHeader mocks base method
func (m *MockLachesisNode_ConnectServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockLachesisNode_ConnectServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockLachesisNode_ConnectServer)(nil).SendHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockLachesisNode_ConnectServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockLachesisNode_ConnectServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockLachesisNode_ConnectServer)(nil).SetTrailer), arg0)
}

// Context mocks base method
func (m *MockLachesisNode_ConnectServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockLachesisNode_ConnectServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockLachesisNode_ConnectServer)(nil).Context))
}

// SendMsg mocks base method
func (m_2 *MockLachesisNode_ConnectServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockLachesisNode_ConnectServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockLachesisNode_ConnectServer)(nil).SendMsg), m)
}

// RecvMsg mocks base method
func (m_2 *MockLachesisNode_ConnectServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockLachesisNode_ConnectServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockLachesisNode_ConnectServer)(nil).RecvMsg), m)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: registry.go

// Package metrics is a generated GoMock package.
package metrics

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRegistry is a mock of Registry interface
type MockRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockRegistryMockRecorder
}

// MockRegistryMockRecorder is the mock recorder for MockRegistry
type MockRegistryMockRecorder struct {
	mock *MockRegistry
}

// NewMockRegistry creates a new mock instance
func NewMockRegistry(ctrl *gomock.Controller) *MockRegistry {
	mock := &MockRegistry{ctrl: ctrl}
	mock.recorder = &MockRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRegistry) EXPECT() *MockRegistryMockRecorder {
	return m.recorder
}

// Each mocks base method
func (m *MockRegistry) Each(f RegistryEachFunc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Each", f)
}

// Each indicates an expected call of Each
func (mr *MockRegistryMockRecorder) Each(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Each", reflect.TypeOf((*MockRegistry)(nil).Each), f)
}

// Register mocks base method
func (m *MockRegistry) Register(name string, metric Metric) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", name, metric)
}

// Register indicates an expected call of Register
func (mr *MockRegistryMockRecorder) Register(name, metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRegistry)(nil).Register), name, metric)
}

// Unregister mocks base method
func (m *MockRegistry) Unregister(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unregister", name)
}

// Unregister indicates an expected call of Unregister
func (mr *MockRegistryMockRecorder) Unregister(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unregister", reflect.TypeOf((*MockRegistry)(nil).Unregister), name)
}

// UnregisterAll mocks base method
func (m *MockRegistry) UnregisterAll() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnregisterAll")
}

// UnregisterAll indicates an expected call of UnregisterAll
func (mr *MockRegistryMockRecorder) UnregisterAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterAll", reflect.TypeOf((*MockRegistry)(nil).UnregisterAll))
}

// Get mocks base method
func (m *MockRegistry) Get(name string) Metric {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", name)
	ret0, _ := ret[0].(Metric)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockRegistryMockRecorder) Get(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRegistry)(nil).Get), name)
}

// GetOrRegister mocks base method
func (m *MockRegistry) GetOrRegister(name string, metric Metric) Metric {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrRegister", name, metric)
	ret0, _ := ret[0].(Metric)
	return ret0
}

// GetOrRegister indicates an expected call of GetOrRegister
func (mr *MockRegistryMockRecorder) GetOrRegister(name, metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrRegister", reflect.TypeOf((*MockRegistry)(nil).GetOrRegister), name, metric)
}

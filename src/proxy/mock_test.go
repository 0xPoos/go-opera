// Code generated by MockGen. DO NOT EDIT.
// Source: handlers.go

// Package proxy is a generated GoMock package.
package proxy

import (
	hash "github.com/Fantom-foundation/go-lachesis/src/hash"
	inter "github.com/Fantom-foundation/go-lachesis/src/inter"
	poset "github.com/Fantom-foundation/go-lachesis/src/poset"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockApp is a mock of App interface
type MockApp struct {
	ctrl     *gomock.Controller
	recorder *MockAppMockRecorder
}

// MockAppMockRecorder is the mock recorder for MockApp
type MockAppMockRecorder struct {
	mock *MockApp
}

// NewMockApp creates a new mock instance
func NewMockApp(ctrl *gomock.Controller) *MockApp {
	mock := &MockApp{ctrl: ctrl}
	mock.recorder = &MockAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockApp) EXPECT() *MockAppMockRecorder {
	return m.recorder
}

// CommitHandler mocks base method
func (m *MockApp) CommitHandler(block poset.Block) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitHandler", block)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitHandler indicates an expected call of CommitHandler
func (mr *MockAppMockRecorder) CommitHandler(block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitHandler", reflect.TypeOf((*MockApp)(nil).CommitHandler), block)
}

// SnapshotHandler mocks base method
func (m *MockApp) SnapshotHandler(blockIndex int64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotHandler", blockIndex)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapshotHandler indicates an expected call of SnapshotHandler
func (mr *MockAppMockRecorder) SnapshotHandler(blockIndex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotHandler", reflect.TypeOf((*MockApp)(nil).SnapshotHandler), blockIndex)
}

// RestoreHandler mocks base method
func (m *MockApp) RestoreHandler(snapshot []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreHandler", snapshot)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreHandler indicates an expected call of RestoreHandler
func (mr *MockAppMockRecorder) RestoreHandler(snapshot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreHandler", reflect.TypeOf((*MockApp)(nil).RestoreHandler), snapshot)
}

// MockNode is a mock of Node interface
type MockNode struct {
	ctrl     *gomock.Controller
	recorder *MockNodeMockRecorder
}

// MockNodeMockRecorder is the mock recorder for MockNode
type MockNodeMockRecorder struct {
	mock *MockNode
}

// NewMockNode creates a new mock instance
func NewMockNode(ctrl *gomock.Controller) *MockNode {
	mock := &MockNode{ctrl: ctrl}
	mock.recorder = &MockNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNode) EXPECT() *MockNodeMockRecorder {
	return m.recorder
}

// GetID mocks base method
func (m *MockNode) GetID() hash.Peer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(hash.Peer)
	return ret0
}

// GetID indicates an expected call of GetID
func (mr *MockNodeMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockNode)(nil).GetID))
}

// AddInternalTxn mocks base method
func (m *MockNode) AddInternalTxn(arg0 inter.InternalTransaction) (hash.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddInternalTxn", arg0)
	ret0, _ := ret[0].(hash.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddInternalTxn indicates an expected call of AddInternalTxn
func (mr *MockNodeMockRecorder) AddInternalTxn(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInternalTxn", reflect.TypeOf((*MockNode)(nil).AddInternalTxn), arg0)
}

// MockConsensus is a mock of Consensus interface
type MockConsensus struct {
	ctrl     *gomock.Controller
	recorder *MockConsensusMockRecorder
}

// MockConsensusMockRecorder is the mock recorder for MockConsensus
type MockConsensusMockRecorder struct {
	mock *MockConsensus
}

// NewMockConsensus creates a new mock instance
func NewMockConsensus(ctrl *gomock.Controller) *MockConsensus {
	mock := &MockConsensus{ctrl: ctrl}
	mock.recorder = &MockConsensusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConsensus) EXPECT() *MockConsensusMockRecorder {
	return m.recorder
}

// StakeOf mocks base method
func (m *MockConsensus) StakeOf(peer hash.Peer) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StakeOf", peer)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// StakeOf indicates an expected call of StakeOf
func (mr *MockConsensusMockRecorder) StakeOf(peer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StakeOf", reflect.TypeOf((*MockConsensus)(nil).StakeOf), peer)
}

// GetTransaction mocks base method
func (m *MockConsensus) GetTransaction(arg0 hash.Transaction) *inter.InternalTransaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", arg0)
	ret0, _ := ret[0].(*inter.InternalTransaction)
	return ret0
}

// GetTransaction indicates an expected call of GetTransaction
func (mr *MockConsensusMockRecorder) GetTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockConsensus)(nil).GetTransaction), arg0)
}

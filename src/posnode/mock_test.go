// Automatically generated by MockGen. DO NOT EDIT!
// Source: consensus.go

package posnode

import (
	hash "github.com/Fantom-foundation/go-lachesis/src/hash"
	gomock "github.com/golang/mock/gomock"
)

// Mock of Consensus interface
type MockConsensus struct {
	ctrl     *gomock.Controller
	recorder *_MockConsensusRecorder
}

// Recorder for MockConsensus (not exported)
type _MockConsensusRecorder struct {
	mock *MockConsensus
}

func NewMockConsensus(ctrl *gomock.Controller) *MockConsensus {
	mock := &MockConsensus{ctrl: ctrl}
	mock.recorder = &_MockConsensusRecorder{mock}
	return mock
}

func (_m *MockConsensus) EXPECT() *_MockConsensusRecorder {
	return _m.recorder
}

func (_m *MockConsensus) PushEvent(_param0 hash.Event) {
	_m.ctrl.Call(_m, "PushEvent", _param0)
}

func (_mr *_MockConsensusRecorder) PushEvent(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PushEvent", arg0)
}

func (_m *MockConsensus) GetStakeOf(_param0 hash.Peer) float64 {
	ret := _m.ctrl.Call(_m, "GetStakeOf", _param0)
	ret0, _ := ret[0].(float64)
	return ret0
}

func (_mr *_MockConsensusRecorder) GetStakeOf(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetStakeOf", arg0)
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package wire

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type KnownEvents struct {
	Lasts map[string]uint64 `protobuf:"bytes,1,rep,name=Lasts" json:"Lasts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (m *KnownEvents) Reset()                    { *m = KnownEvents{} }
func (m *KnownEvents) String() string            { return proto.CompactTextString(m) }
func (*KnownEvents) ProtoMessage()               {}
func (*KnownEvents) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *KnownEvents) GetLasts() map[string]uint64 {
	if m != nil {
		return m.Lasts
	}
	return nil
}

type EventRequest struct {
	PeerID string `protobuf:"bytes,1,opt,name=PeerID" json:"PeerID,omitempty"`
	Index  uint64 `protobuf:"varint,2,opt,name=Index" json:"Index,omitempty"`
}

func (m *EventRequest) Reset()                    { *m = EventRequest{} }
func (m *EventRequest) String() string            { return proto.CompactTextString(m) }
func (*EventRequest) ProtoMessage()               {}
func (*EventRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *EventRequest) GetPeerID() string {
	if m != nil {
		return m.PeerID
	}
	return ""
}

func (m *EventRequest) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type EventByHashRequest struct {
	Hash []byte `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
}

func (m *EventByHashRequest) Reset()                    { *m = EventByHashRequest{} }
func (m *EventByHashRequest) String() string            { return proto.CompactTextString(m) }
func (*EventByHashRequest) ProtoMessage()               {}
func (*EventByHashRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *EventByHashRequest) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type PeerRequest struct {
	PeerID string `protobuf:"bytes,1,opt,name=PeerID" json:"PeerID,omitempty"`
}

func (m *PeerRequest) Reset()                    { *m = PeerRequest{} }
func (m *PeerRequest) String() string            { return proto.CompactTextString(m) }
func (*PeerRequest) ProtoMessage()               {}
func (*PeerRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *PeerRequest) GetPeerID() string {
	if m != nil {
		return m.PeerID
	}
	return ""
}

type PeerInfo struct {
	ID     string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	PubKey []byte `protobuf:"bytes,2,opt,name=PubKey,proto3" json:"PubKey,omitempty"`
	Host   string `protobuf:"bytes,3,opt,name=Host" json:"Host,omitempty"`
}

func (m *PeerInfo) Reset()                    { *m = PeerInfo{} }
func (m *PeerInfo) String() string            { return proto.CompactTextString(m) }
func (*PeerInfo) ProtoMessage()               {}
func (*PeerInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *PeerInfo) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *PeerInfo) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *PeerInfo) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func init() {
	proto.RegisterType((*KnownEvents)(nil), "wire.KnownEvents")
	proto.RegisterType((*EventRequest)(nil), "wire.EventRequest")
	proto.RegisterType((*EventByHashRequest)(nil), "wire.EventByHashRequest")
	proto.RegisterType((*PeerRequest)(nil), "wire.PeerRequest")
	proto.RegisterType((*PeerInfo)(nil), "wire.PeerInfo")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Node service

type NodeClient interface {
	SyncEvents(ctx context.Context, in *KnownEvents, opts ...grpc.CallOption) (*KnownEvents, error)
	GetEvent(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*Event, error)
	GetEventByHash(ctx context.Context, in *EventByHashRequest, opts ...grpc.CallOption) (*Event, error)
	GetPeerInfo(ctx context.Context, in *PeerRequest, opts ...grpc.CallOption) (*PeerInfo, error)
}

type nodeClient struct {
	cc *grpc.ClientConn
}

func NewNodeClient(cc *grpc.ClientConn) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) SyncEvents(ctx context.Context, in *KnownEvents, opts ...grpc.CallOption) (*KnownEvents, error) {
	out := new(KnownEvents)
	err := grpc.Invoke(ctx, "/wire.Node/SyncEvents", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetEvent(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := grpc.Invoke(ctx, "/wire.Node/GetEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetEventByHash(ctx context.Context, in *EventByHashRequest, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := grpc.Invoke(ctx, "/wire.Node/GetEventByHash", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetPeerInfo(ctx context.Context, in *PeerRequest, opts ...grpc.CallOption) (*PeerInfo, error) {
	out := new(PeerInfo)
	err := grpc.Invoke(ctx, "/wire.Node/GetPeerInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Node service

type NodeServer interface {
	SyncEvents(context.Context, *KnownEvents) (*KnownEvents, error)
	GetEvent(context.Context, *EventRequest) (*Event, error)
	GetEventByHash(context.Context, *EventByHashRequest) (*Event, error)
	GetPeerInfo(context.Context, *PeerRequest) (*PeerInfo, error)
}

func RegisterNodeServer(s *grpc.Server, srv NodeServer) {
	s.RegisterService(&_Node_serviceDesc, srv)
}

func _Node_SyncEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KnownEvents)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).SyncEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wire.Node/SyncEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).SyncEvents(ctx, req.(*KnownEvents))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wire.Node/GetEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetEvent(ctx, req.(*EventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetEventByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventByHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetEventByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wire.Node/GetEventByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetEventByHash(ctx, req.(*EventByHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetPeerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetPeerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wire.Node/GetPeerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetPeerInfo(ctx, req.(*PeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Node_serviceDesc = grpc.ServiceDesc{
	ServiceName: "wire.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncEvents",
			Handler:    _Node_SyncEvents_Handler,
		},
		{
			MethodName: "GetEvent",
			Handler:    _Node_GetEvent_Handler,
		},
		{
			MethodName: "GetEventByHash",
			Handler:    _Node_GetEventByHash_Handler,
		},
		{
			MethodName: "GetPeerInfo",
			Handler:    _Node_GetPeerInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 331 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0x4d, 0x4b, 0xc3, 0x40,
	0x14, 0x6c, 0xd2, 0xb4, 0xd4, 0x97, 0x5a, 0xf4, 0x21, 0x12, 0x82, 0x87, 0xb2, 0x20, 0xe4, 0x62,
	0x0e, 0xd1, 0x43, 0x15, 0x4f, 0xd2, 0x5a, 0x4b, 0x45, 0x24, 0xfe, 0x82, 0x7e, 0x3c, 0xb1, 0x28,
	0x1b, 0xcd, 0x6e, 0x5b, 0x83, 0xff, 0xd4, 0x5f, 0x23, 0xfb, 0x92, 0xb4, 0xd1, 0x1e, 0xbc, 0xcd,
	0xcc, 0xce, 0xcc, 0x6e, 0x86, 0xc0, 0xbe, 0xa2, 0x74, 0xb5, 0x98, 0x51, 0xf8, 0x9e, 0x26, 0x3a,
	0x41, 0x67, 0xbd, 0x48, 0xc9, 0x77, 0x69, 0x45, 0x52, 0xe7, 0x92, 0xf8, 0x02, 0x77, 0x2c, 0x93,
	0xb5, 0x1c, 0x18, 0x4d, 0x61, 0x04, 0x8d, 0xfb, 0x89, 0xd2, 0xca, 0xb3, 0xba, 0xf5, 0xc0, 0x8d,
	0x4e, 0x42, 0x93, 0x08, 0x2b, 0x8e, 0x90, 0x8f, 0x07, 0x52, 0xa7, 0x59, 0x9c, 0x5b, 0xfd, 0x1e,
	0xc0, 0x56, 0xc4, 0x03, 0xa8, 0xbf, 0x52, 0xe6, 0x59, 0x5d, 0x2b, 0xd8, 0x8b, 0x0d, 0xc4, 0x23,
	0x68, 0xac, 0x26, 0x6f, 0x4b, 0xf2, 0xec, 0xae, 0x15, 0x38, 0x71, 0x4e, 0xae, 0xec, 0x9e, 0x25,
	0xae, 0xa1, 0xcd, 0xad, 0x31, 0x7d, 0x2c, 0x49, 0x69, 0x3c, 0x86, 0xe6, 0x23, 0x51, 0x3a, 0xea,
	0x17, 0xf1, 0x82, 0x99, 0x86, 0x91, 0x9c, 0xd3, 0x67, 0xd9, 0xc0, 0x44, 0x04, 0x80, 0x9c, 0xbe,
	0xc9, 0xee, 0x26, 0xea, 0xa5, 0xec, 0x40, 0x70, 0x0c, 0xe5, 0x86, 0x76, 0xcc, 0x58, 0x9c, 0x82,
	0x6b, 0x9a, 0xfe, 0xb9, 0x46, 0xdc, 0x42, 0x8b, 0x91, 0x7c, 0x4e, 0xb0, 0x03, 0xf6, 0xe6, 0xdc,
	0x1e, 0xf5, 0x39, 0xb3, 0x9c, 0x8e, 0x29, 0xe3, 0x37, 0xb4, 0xe3, 0x82, 0xf1, 0x75, 0x89, 0xd2,
	0x5e, 0x9d, 0x9d, 0x8c, 0xa3, 0x6f, 0x0b, 0x9c, 0x87, 0x64, 0x4e, 0x78, 0x01, 0xf0, 0x94, 0xc9,
	0x59, 0xb1, 0xed, 0xe1, 0xce, 0x98, 0xfe, 0xae, 0x24, 0x6a, 0x78, 0x06, 0xad, 0x21, 0x69, 0xa6,
	0x88, 0xb9, 0xa1, 0xba, 0x92, 0xef, 0x56, 0x34, 0x51, 0xc3, 0x4b, 0xe8, 0x94, 0xf6, 0x7c, 0x09,
	0xf4, 0x2a, 0x86, 0x5f, 0xe3, 0xfc, 0x8d, 0x46, 0xe0, 0x0e, 0x49, 0x6f, 0xbe, 0xb9, 0x78, 0x4d,
	0x65, 0x2a, 0xbf, 0xb3, 0x95, 0x8c, 0x45, 0xd4, 0xa6, 0x4d, 0xfe, 0x6f, 0xce, 0x7f, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x0a, 0xd2, 0x6a, 0x67, 0x5b, 0x02, 0x00, 0x00,
}

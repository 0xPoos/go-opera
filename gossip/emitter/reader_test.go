// Code generated by MockGen. DO NOT EDIT.
// Source: reader.go

// Package emitter is a generated GoMock package.
package emitter

import (
	evmcore "github.com/Fantom-foundation/go-opera/evmcore"
	inter "github.com/Fantom-foundation/go-opera/inter"
	opera "github.com/Fantom-foundation/go-opera/opera"
	hash "github.com/Fantom-foundation/lachesis-base/hash"
	idx "github.com/Fantom-foundation/lachesis-base/inter/idx"
	pos "github.com/Fantom-foundation/lachesis-base/inter/pos"
	common "github.com/ethereum/go-ethereum/common"
	types "github.com/ethereum/go-ethereum/core/types"
	event "github.com/ethereum/go-ethereum/event"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockReader is a mock of Reader interface
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderMockRecorder
}

// MockReaderMockRecorder is the mock recorder for MockReader
type MockReaderMockRecorder struct {
	mock *MockReader
}

// NewMockReader creates a new mock instance
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &MockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReader) EXPECT() *MockReaderMockRecorder {
	return m.recorder
}

// GetLatestBlockIndex mocks base method
func (m *MockReader) GetLatestBlockIndex() idx.Block {
	ret := m.ctrl.Call(m, "GetLatestBlockIndex")
	ret0, _ := ret[0].(idx.Block)
	return ret0
}

// GetLatestBlockIndex indicates an expected call of GetLatestBlockIndex
func (mr *MockReaderMockRecorder) GetLatestBlockIndex() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestBlockIndex", reflect.TypeOf((*MockReader)(nil).GetLatestBlockIndex))
}

// GetEpochValidators mocks base method
func (m *MockReader) GetEpochValidators() (*pos.Validators, idx.Epoch) {
	ret := m.ctrl.Call(m, "GetEpochValidators")
	ret0, _ := ret[0].(*pos.Validators)
	ret1, _ := ret[1].(idx.Epoch)
	return ret0, ret1
}

// GetEpochValidators indicates an expected call of GetEpochValidators
func (mr *MockReaderMockRecorder) GetEpochValidators() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEpochValidators", reflect.TypeOf((*MockReader)(nil).GetEpochValidators))
}

// GetEvent mocks base method
func (m *MockReader) GetEvent(arg0 hash.Event) *inter.Event {
	ret := m.ctrl.Call(m, "GetEvent", arg0)
	ret0, _ := ret[0].(*inter.Event)
	return ret0
}

// GetEvent indicates an expected call of GetEvent
func (mr *MockReaderMockRecorder) GetEvent(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvent", reflect.TypeOf((*MockReader)(nil).GetEvent), arg0)
}

// GetEventPayload mocks base method
func (m *MockReader) GetEventPayload(arg0 hash.Event) *inter.EventPayload {
	ret := m.ctrl.Call(m, "GetEventPayload", arg0)
	ret0, _ := ret[0].(*inter.EventPayload)
	return ret0
}

// GetEventPayload indicates an expected call of GetEventPayload
func (mr *MockReaderMockRecorder) GetEventPayload(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventPayload", reflect.TypeOf((*MockReader)(nil).GetEventPayload), arg0)
}

// GetLastEvent mocks base method
func (m *MockReader) GetLastEvent(epoch idx.Epoch, from idx.ValidatorID) *hash.Event {
	ret := m.ctrl.Call(m, "GetLastEvent", epoch, from)
	ret0, _ := ret[0].(*hash.Event)
	return ret0
}

// GetLastEvent indicates an expected call of GetLastEvent
func (mr *MockReaderMockRecorder) GetLastEvent(epoch, from interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastEvent", reflect.TypeOf((*MockReader)(nil).GetLastEvent), epoch, from)
}

// GetHeads mocks base method
func (m *MockReader) GetHeads(arg0 idx.Epoch) hash.Events {
	ret := m.ctrl.Call(m, "GetHeads", arg0)
	ret0, _ := ret[0].(hash.Events)
	return ret0
}

// GetHeads indicates an expected call of GetHeads
func (mr *MockReaderMockRecorder) GetHeads(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeads", reflect.TypeOf((*MockReader)(nil).GetHeads), arg0)
}

// GetGenesisTime mocks base method
func (m *MockReader) GetGenesisTime() inter.Timestamp {
	ret := m.ctrl.Call(m, "GetGenesisTime")
	ret0, _ := ret[0].(inter.Timestamp)
	return ret0
}

// GetGenesisTime indicates an expected call of GetGenesisTime
func (mr *MockReaderMockRecorder) GetGenesisTime() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenesisTime", reflect.TypeOf((*MockReader)(nil).GetGenesisTime))
}

// GetRules mocks base method
func (m *MockReader) GetRules() opera.Rules {
	ret := m.ctrl.Call(m, "GetRules")
	ret0, _ := ret[0].(opera.Rules)
	return ret0
}

// GetRules indicates an expected call of GetRules
func (mr *MockReaderMockRecorder) GetRules() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRules", reflect.TypeOf((*MockReader)(nil).GetRules))
}

// MocktxPool is a mock of txPool interface
type MocktxPool struct {
	ctrl     *gomock.Controller
	recorder *MocktxPoolMockRecorder
}

// MocktxPoolMockRecorder is the mock recorder for MocktxPool
type MocktxPoolMockRecorder struct {
	mock *MocktxPool
}

// NewMocktxPool creates a new mock instance
func NewMocktxPool(ctrl *gomock.Controller) *MocktxPool {
	mock := &MocktxPool{ctrl: ctrl}
	mock.recorder = &MocktxPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocktxPool) EXPECT() *MocktxPoolMockRecorder {
	return m.recorder
}

// Has mocks base method
func (m *MocktxPool) Has(hash common.Hash) bool {
	ret := m.ctrl.Call(m, "Has", hash)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has
func (mr *MocktxPoolMockRecorder) Has(hash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MocktxPool)(nil).Has), hash)
}

// Pending mocks base method
func (m *MocktxPool) Pending() (map[common.Address]types.Transactions, error) {
	ret := m.ctrl.Call(m, "Pending")
	ret0, _ := ret[0].(map[common.Address]types.Transactions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pending indicates an expected call of Pending
func (mr *MocktxPoolMockRecorder) Pending() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pending", reflect.TypeOf((*MocktxPool)(nil).Pending))
}

// SubscribeNewTxsNotify mocks base method
func (m *MocktxPool) SubscribeNewTxsNotify(arg0 chan<- evmcore.NewTxsNotify) event.Subscription {
	ret := m.ctrl.Call(m, "SubscribeNewTxsNotify", arg0)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// SubscribeNewTxsNotify indicates an expected call of SubscribeNewTxsNotify
func (mr *MocktxPoolMockRecorder) SubscribeNewTxsNotify(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeNewTxsNotify", reflect.TypeOf((*MocktxPool)(nil).SubscribeNewTxsNotify), arg0)
}
